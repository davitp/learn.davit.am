(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1192],{8771:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/system-programming/tasks/ipc/prime-calculator",function(){return i(9797)}])},9797:function(e,n,i){"use strict";i.r(n),i.d(n,{useTOC:function(){return c}});var s=i(2676),t=i(8002),r=i(9013),a=i(2600),l=i(6297);function c(e){return[{value:"Requirements",id:"requirements",depth:3},{value:"Expected result",id:"expected-result",depth:3}]}n.default=(0,t.c)(function(e){let{toc:n=c(e)}=e,i={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{children:"IPC-2: Prime calculator"}),"\n",(0,s.jsx)(i.h3,{id:n[0].id,children:n[0].value}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Write a C++ program that creates a child process."}),"\n",(0,s.jsxs)(i.li,{children:["The main process infinitely waits for the user’s input integer ",(0,s.jsx)(i.strong,{children:"m"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:["Once number ",(0,s.jsx)(i.strong,{children:"m"})," is received by the main process, it gets passed to the child process via ",(0,s.jsx)(i.strong,{children:"anonymous pipe"}),"."]}),"\n",(0,s.jsx)(i.li,{children:"The child process takes m from the anonymous pipe and calculates the m-th prime number."}),"\n",(0,s.jsx)(i.li,{children:"The child process should send the result of the calculation back to the parent process, which, should print it and wait for the next input."}),"\n",(0,s.jsx)(i.li,{children:"If the “exit” command is entered, the main process should stop its execution."}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:n[1].id,children:n[1].value}),"\n",(0,s.jsx)(i.p,{children:"The resulting application should be able to build and execute from the command line as follows:"}),"\n",(0,s.jsx)(i.pre,{icon:l.Fx,tabIndex:"0","data-language":"sh","data-word-wrap":"",children:(0,s.jsxs)(i.code,{children:[(0,s.jsx)(i.span,{children:(0,s.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"make"})}),"\n",(0,s.jsx)(i.span,{children:(0,s.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"./prime-calculator"})})]})}),"\n",(0,s.jsx)(i.p,{children:"The typical execution of the program should look like the following:"}),"\n",(0,s.jsx)(i.pre,{"data-word-wrap":"",children:(0,s.jsx)(i.code,{children:"[Parent] Please enter the number: 8\n[Parent] Sending 8 to the child process...\n[Parent] Waiting for the response from the child process...\n[Child] Calculating 8-th prime number...\n[Child] Sending calculation result of prime(8)...\n[Parent] Received calculation result of prime(8) = 19...\n"})}),"\n",(0,s.jsxs)(i.p,{children:["The final solution should contain a ",(0,s.jsx)(i.strong,{children:"Makefile"})," for the multi-stage build. The Makefile should also contain targets ",(0,s.jsx)(i.strong,{children:"all"})," and ",(0,s.jsx)(i.strong,{children:"clean"}),". It’s recommended to have compiler and compiler flags declared as Makefile variables. Alternatively, ",(0,s.jsx)(i.strong,{children:"cmake"})," could also be used instead of make."]})]})},"/system-programming/tasks/ipc/prime-calculator",{filePath:"pages/system-programming/tasks/ipc/prime-calculator.mdx",timestamp:1757370077e3,pageMap:r.v,frontMatter:{description:"Discover C++ interprocess communication on Linux: create child processes, pass data via anonymous pipes, and calculate prime numbers efficiently. Perfect for mastering advanced System Programming techniques.\n"},title:"IPC-2: Prime calculator"},"undefined"==typeof RemoteContent?c:RemoteContent.useTOC)}},function(e){e.O(0,[6827,2888,9774,179],function(){return e(e.s=8771)}),_N_E=e.O()}]);