(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7976],{98:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/system-programming/topics/threads",function(){return r(8458)}])},8458:function(e,n,r){"use strict";r.r(n),r.d(n,{useTOC:function(){return d}});var i=r(2676),s=r(7250),h=r(9013),t=r(8583);function d(e){return[{value:"Overview",id:"overview",depth:2},{value:"Key Concepts",id:"key-concepts",depth:2},{value:"Practice",id:"practice",depth:2},{value:"Thread Creation",id:"thread-creation",depth:3},{value:"Joining and Detaching",id:"joining-and-detaching",depth:3},{value:"Thread Attributes",id:"thread-attributes",depth:3},{value:"Observation",id:"observation",depth:3},{value:"Homework",id:"homework",depth:3},{value:"Samples",id:"samples",depth:3},{value:"References",id:"references",depth:2},{value:"Quiz (Self-Check)",id:"quiz-self-check",depth:2}]}n.default=(0,s.c)(function(e){let{toc:n=d(e)}=e,r={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{children:"Multithreading and POSIX Threads"}),"\n",(0,i.jsx)(r.h2,{id:n[0].id,children:n[0].value}),"\n",(0,i.jsxs)(r.p,{children:["This week introduces ",(0,i.jsx)(r.strong,{children:"threads"})," as lightweight units of execution within a process.",(0,i.jsx)(r.br,{}),"\n","Students will learn how threads differ from processes, how they share resources, and how to use the ",(0,i.jsx)(r.strong,{children:"POSIX Threads (pthreads)"})," API to create, synchronize, and manage them effectively in Linux."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:n[1].id,children:n[1].value}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Threads vs. Processes"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"A process has its own memory space; threads share the same address space."}),"\n",(0,i.jsx)(r.li,{children:"Threads enable concurrent execution within a single process."}),"\n",(0,i.jsx)(r.li,{children:"Threads are more efficient for parallel tasks that share data."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"POSIX Threads (pthreads)"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Standardized API for thread programming in UNIX/Linux environments."}),"\n",(0,i.jsxs)(r.li,{children:["Main functions:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"pthread_create()"})," — create a new thread"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"pthread_join()"})," — wait for a thread to complete"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"pthread_exit()"})," — terminate the current thread"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"pthread_self()"})," — obtain the thread ID"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"pthread_detach()"})," — run thread independently (no ",(0,i.jsx)(r.code,{children:"join"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Thread Lifecycle"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"States: new → runnable → running → terminated"}),"\n",(0,i.jsx)(r.li,{children:"Resource management: stack, thread ID, attributes"}),"\n",(0,i.jsx)(r.li,{children:"Detached vs. joinable threads and their memory implications"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Thread Safety"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Shared memory requires careful access to avoid conflicts (to be covered later)."}),"\n",(0,i.jsxs)(r.li,{children:["Distinguish between ",(0,i.jsx)(r.em,{children:"thread-safe"})," and ",(0,i.jsx)(r.em,{children:"non-thread-safe"})," library functions."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:n[2].id,children:n[2].value}),"\n",(0,i.jsx)(r.h3,{id:n[3].id,children:n[3].value}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Write a simple program that spawns multiple threads using ",(0,i.jsx)(r.code,{children:"pthread_create()"}),"."]}),"\n",(0,i.jsxs)(r.li,{children:["Pass arguments to threads and print thread identifiers with ",(0,i.jsx)(r.code,{children:"pthread_self()"}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:n[4].id,children:n[4].value}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Use ",(0,i.jsx)(r.code,{children:"pthread_join()"})," to synchronize thread completion."]}),"\n",(0,i.jsxs)(r.li,{children:["Create detached threads using ",(0,i.jsx)(r.code,{children:"pthread_detach()"})," and observe behavior."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:n[5].id,children:n[5].value}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Experiment with ",(0,i.jsx)(r.code,{children:"pthread_attr_t"})," to set stack size or detach state."]}),"\n",(0,i.jsxs)(r.li,{children:["Observe resource usage differences using tools like ",(0,i.jsx)(r.code,{children:"htop"})," (",(0,i.jsx)(r.code,{children:"Shift + H"}),")."]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:n[6].id,children:n[6].value}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Compare thread vs. process creation times using ",(0,i.jsx)(r.code,{children:"time"})," and simple benchmarks."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:n[7].id,children:n[7].value}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/system-programming/tasks/threads/array-sum/",children:"TH-1: The array summary"})}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:n[8].id,children:n[8].value}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"/system-programming/samples/create-thread/",children:"Creating a thread"})}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:n[9].id,children:n[9].value}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Required"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.geeksforgeeks.org/function-pointer-in-c/",children:"Function Pointer in C"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.youtube.com/watch?v=NLVEuwWayvA",children:"ECE 252 Lecture 10: Threads"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.youtube.com/watch?v=7v9qCRacIw8",children:"ECE 252 Lecture 11: Threads and Concurrency"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.lektorium.tv/lecture/13557",children:"Параллельное программирование. Лекция 1 (RUS)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://tamerlan.dev/introduction-to-pthreads/",children:"Introduction to Pthreads"})}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.em,{children:"Advanced Programming in the UNIX Environment"})," — W. Richard Stevens, Chapter 11 “Threads”"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.em,{children:"Programming with POSIX Threads"})," — David R. Butenhof"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.em,{children:"Operating Systems: Three Easy Pieces"})," — Chapter on “Concurrency and Threads”"]}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/pthread.h.html",children:"The Open Group — POSIX Threads Specification"})}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Recommended"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://man7.org/linux/man-pages/man3/pthread_create.3.html",children:"Linux manual page - pthread_create(3)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://man7.org/linux/man-pages/man3/pthread_join.3.html",children:"Linux manual page - pthread_join(3)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://man7.org/linux/man-pages/man3/pthread_exit.3.html",children:"Linux manual page - pthread_exit(3)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://man7.org/linux/man-pages/man3/pthread_cancel.3.html",children:"Linux manual page - pthread_cancel(3)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://man7.org/linux/man-pages/man3/pthread_attr_init.3.html",children:"Linux manual page - pthread_attr_init(3)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://man7.org/linux/man-pages/man3/pthread_attr_destroy.3.html",children:"Linux manual page - pthread_attr_destroy(3)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.geeksforgeeks.org/multithreading-in-c/",children:"Multithreading in C"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.geeksforgeeks.org/thread-functions-in-c-c/",children:"Thread functions in C/C++"})}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:n[10].id,children:n[10].value}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"What is the key difference between a process and a thread?"}),"\n",(0,i.jsx)(r.li,{children:"Which function is used to create a new thread in POSIX?"}),"\n",(0,i.jsx)(r.li,{children:"What happens if a joinable thread finishes without being joined?"}),"\n",(0,i.jsxs)(r.li,{children:["What is the purpose of ",(0,i.jsx)(r.code,{children:"pthread_detach()"}),"?"]}),"\n",(0,i.jsx)(r.li,{children:"Why do threads share the same memory space, and what are the implications of this?"}),"\n",(0,i.jsxs)(r.li,{children:["What information does ",(0,i.jsx)(r.code,{children:"pthread_self()"})," return?"]}),"\n"]})]})},"/system-programming/topics/threads",{filePath:"pages/system-programming/topics/threads.mdx",timestamp:1760875851e3,pageMap:h.v,frontMatter:{description:"Introduction to multithreading in Linux using POSIX Threads (pthreads). Understanding thread creation, management, and synchronization."},title:"Multithreading and POSIX Threads"},"undefined"==typeof RemoteContent?d:RemoteContent.useTOC)}},function(e){e.O(0,[8977,2888,9774,179],function(){return e(e.s=98)}),_N_E=e.O()}]);