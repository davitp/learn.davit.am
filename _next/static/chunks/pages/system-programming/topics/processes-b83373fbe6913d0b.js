(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5914],{1860:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/system-programming/topics/processes",function(){return n(1687)}])},1687:function(e,s,n){"use strict";n.r(s),n.d(s,{useTOC:function(){return d}});var i=n(2676),r=n(7250),c=n(9013),l=n(8583);function d(e){return[{value:"Overview",id:"overview",depth:2},{value:"Key Concepts",id:"key-concepts",depth:2},{value:"What is a Process?",id:"what-is-a-process",depth:3},{value:"Virtual Memory (Brief Overview)",id:"virtual-memory-brief-overview",depth:3},{value:"Process Hierarchy and Inheritance",id:"process-hierarchy-and-inheritance",depth:3},{value:"Process Creation and Execution",id:"process-creation-and-execution",depth:3},{value:"Practice / Lab",id:"practice--lab",depth:2},{value:"Exploring the Process Tree",id:"exploring-the-process-tree",depth:3},{value:"Process Creation",id:"process-creation",depth:3},{value:"Executing New Programs",id:"executing-new-programs",depth:3},{value:"Process Synchronization",id:"process-synchronization",depth:3},{value:"Homework",id:"homework",depth:2},{value:"Samples",id:"samples",depth:3},{value:"References & Resources",id:"references--resources",depth:2},{value:"Quiz (Self-check)",id:"quiz-self-check",depth:2},{value:"Suggested Tools",id:"suggested-tools",depth:2}]}s.default=(0,r.c)(function(e){let{toc:s=d(e)}=e,n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Processes"}),"\n",(0,i.jsx)(n.h2,{id:s[0].id,children:s[0].value}),"\n",(0,i.jsxs)(n.p,{children:["This week introduces the ",(0,i.jsx)(n.strong,{children:"process model"})," — the fundamental abstraction for executing programs in an operating system.",(0,i.jsx)(n.br,{}),"\n","Students will learn how processes are created, how they relate to one another, and how Linux represents and manages them.",(0,i.jsx)(n.br,{}),"\n","We will also briefly explore ",(0,i.jsx)(n.strong,{children:"virtual memory"})," and its role in isolating processes, followed by the main system calls for creating and controlling processes."]}),"\n",(0,i.jsx)(n.p,{children:"By the end of this week, students will understand how programs become running processes, how parent and child processes interact, and how process management underpins multitasking in Linux."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:s[1].id,children:s[1].value}),"\n",(0,i.jsx)(n.h3,{id:s[2].id,children:s[2].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A process as an executing program instance"}),"\n",(0,i.jsx)(n.li,{children:"Process attributes: PID, state, program counter, registers, open files"}),"\n",(0,i.jsx)(n.li,{children:"Process lifecycle: creation → execution → termination"}),"\n",(0,i.jsxs)(n.li,{children:["Relationship between ",(0,i.jsx)(n.strong,{children:"programs"})," and ",(0,i.jsx)(n.strong,{children:"processes"})]}),"\n",(0,i.jsx)(n.li,{children:"Context switching overview"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:s[3].id,children:s[3].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Concept of process isolation"}),"\n",(0,i.jsx)(n.li,{children:"Logical vs physical address spaces"}),"\n",(0,i.jsx)(n.li,{children:"Paging: mapping memory in fixed-size blocks (pages)"}),"\n",(0,i.jsx)(n.li,{children:"Role of MMU and page tables (at a high level)"}),"\n",(0,i.jsx)(n.li,{children:"How virtual memory supports multitasking and protection"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:s[4].id,children:s[4].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The process tree: ",(0,i.jsx)(n.code,{children:"init"}),"/",(0,i.jsx)(n.code,{children:"systemd"})," as ancestor of all processes"]}),"\n",(0,i.jsx)(n.li,{children:"Parent and child relationships"}),"\n",(0,i.jsx)(n.li,{children:"Inheritance of environment variables and file descriptors"}),"\n",(0,i.jsx)(n.li,{children:"Process groups and sessions"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:s[5].id,children:s[5].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fork()"})," — duplicating the current process"]}),"\n",(0,i.jsxs)(n.li,{children:["Return semantics of ",(0,i.jsx)(n.code,{children:"fork()"})," (0 in child, PID in parent)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"exec()"})," family — replacing the current process image"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"getpid()"}),", ",(0,i.jsx)(n.code,{children:"getppid()"})," — identifying process lineage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"wait()"})," and ",(0,i.jsx)(n.code,{children:"waitpid()"})," — synchronizing process termination"]}),"\n",(0,i.jsx)(n.li,{children:"Zombies and orphan processes"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:s[6].id,children:s[6].value}),"\n",(0,i.jsx)(n.h3,{id:s[7].id,children:s[7].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use shell tools (",(0,i.jsx)(n.code,{children:"ps"}),", ",(0,i.jsx)(n.code,{children:"pstree"}),", ",(0,i.jsx)(n.code,{children:"top"}),", ",(0,i.jsx)(n.code,{children:"htop"}),") to inspect running processes."]}),"\n",(0,i.jsx)(n.li,{children:"Identify parent-child relationships and PIDs."}),"\n",(0,i.jsxs)(n.li,{children:["Observe behavior when starting background jobs (",(0,i.jsx)(n.code,{children:"&"}),") and pipelines."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:s[8].id,children:s[8].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Write a simple program that spawns child processes using ",(0,i.jsx)(n.code,{children:"fork()"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Observe execution order and differences in PID and PPID."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:s[9].id,children:s[9].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"exec()"})," to replace a process image and observe that it does not return."]}),"\n",(0,i.jsxs)(n.li,{children:["Combine ",(0,i.jsx)(n.code,{children:"fork()"})," and ",(0,i.jsx)(n.code,{children:"exec()"})," to launch external commands from your program."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:s[10].id,children:s[10].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"wait()"})," and ",(0,i.jsx)(n.code,{children:"waitpid()"})," to ensure orderly termination of child processes."]}),"\n",(0,i.jsx)(n.li,{children:"Observe zombie processes when a parent does not wait."}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:s[11].id,children:s[11].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/system-programming/tasks/processes/do-command/",children:"PS-1: Do command"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/system-programming/tasks/processes/interactive-shell/",children:"PS-2: Interactive shell"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:s[12].id,children:s[12].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/system-programming/samples/create-process/",children:"Creating a process"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:s[13].id,children:s[13].value}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=7pJfIhvnIu0",children:"ECE 252 Lecture 4: Processes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=RLl4vmErFgM",children:"ECE 252 Lecture 5: Processes in UNIX"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.baeldung.com/linux/exec-functions",children:"The Exec Family of Functions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=cex9XrZCU14",children:"The fork function in C"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=tcYo6hipaSA",children:"Waiting for processes to finish in C"})}),"\n",(0,i.jsxs)(n.li,{children:["Kerrisk, ",(0,i.jsx)(n.em,{children:"The Linux Programming Interface"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Chapter 24: Process Creation"}),"\n",(0,i.jsx)(n.li,{children:"Chapter 25: Process Termination"}),"\n",(0,i.jsx)(n.li,{children:"Chapter 26: Executing Programs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Recommended"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/fork.2.html",children:"Linux manual page - fork(2)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/wait.2.html",children:"Linux manual page - wait(2)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man2/clone.2.html",children:"Linux manual page - clone(2)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://man7.org/linux/man-pages/man3/exec.3.html",children:"Linux manual page - exec(3)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.geeksforgeeks.org/fork-system-call/",children:"Example of fork() in C"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.geeksforgeeks.org/fork-system-call-in-operating-system/",children:"Fork System Call in Operating System"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.ibm.com/articles/l-linux-process-and-threads/",children:"Linux Processes and Threads (IBM Developer)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://www.geeksforgeeks.org/fork-exec-wait-system-call/",children:["Understanding ",(0,i.jsx)(n.code,{children:"fork()"})," and ",(0,i.jsx)(n.code,{children:"exec()"})," (GeeksforGeeks)"]})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/system_design_guide/assembly_understanding-processes-system-design-guide",children:"The Process Tree (Red Hat Docs)"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:s[14].id,children:s[14].value}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"What is the difference between a program and a process?"}),"\n",(0,i.jsx)(n.li,{children:"What does virtual memory achieve in process isolation?"}),"\n",(0,i.jsxs)(n.li,{children:["What are the main differences between ",(0,i.jsx)(n.code,{children:"fork()"})," and ",(0,i.jsx)(n.code,{children:"exec()"}),"?"]}),"\n",(0,i.jsxs)(n.li,{children:["What is inherited by a child process after ",(0,i.jsx)(n.code,{children:"fork()"}),"?"]}),"\n",(0,i.jsxs)(n.li,{children:["What happens if a parent process never calls ",(0,i.jsx)(n.code,{children:"wait()"}),"?"]}),"\n",(0,i.jsx)(n.li,{children:"What is a zombie process, and how is it removed?"}),"\n",(0,i.jsxs)(n.li,{children:["How do ",(0,i.jsx)(n.code,{children:"getpid()"})," and ",(0,i.jsx)(n.code,{children:"getppid()"})," relate within a process tree?"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:s[15].id,children:s[15].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ps"}),", ",(0,i.jsx)(n.code,{children:"pstree"}),", ",(0,i.jsx)(n.code,{children:"top"}),", ",(0,i.jsx)(n.code,{children:"htop"})," – inspect running processes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"strace"})," – trace ",(0,i.jsx)(n.code,{children:"fork"}),", ",(0,i.jsx)(n.code,{children:"exec"}),", ",(0,i.jsx)(n.code,{children:"wait"})," system calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pmap"})," – display memory map of a process"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"lsof"})," – list open files for a given process"]}),"\n"]})]})},"/system-programming/topics/processes",{filePath:"pages/system-programming/topics/processes.mdx",timestamp:1760295066e3,pageMap:c.v,frontMatter:{description:"Introduction to processes in Linux — process model, virtual memory basics, and core system calls for process creation and management."},title:"Processes"},"undefined"==typeof RemoteContent?d:RemoteContent.useTOC)}},function(e){e.O(0,[8977,2888,9774,179],function(){return e(e.s=1860)}),_N_E=e.O()}]);