(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4372],{3068:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/linux-programming/tasks/file-systems/manual-append",function(){return i(4713)}])},4713:function(e,n,i){"use strict";i.r(n),i.d(n,{useTOC:function(){return d}});var t=i(2676),s=i(5730),l=i(1570),r=i(2837),a=i(9156);function d(e){return[{value:"Description",id:"description",depth:3},{value:"Requirements",id:"requirements",depth:3},{value:"Expected result",id:"expected-result",depth:3}]}n.default=(0,s.c)(function(e){let{toc:n=d(e)}=e,i={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{children:"FS-5: Manaul append"}),"\n",(0,t.jsx)(i.h3,{id:n[0].id,children:n[0].value}),"\n",(0,t.jsx)(i.p,{children:"Your task is to write a program on C/C++ that writes two lines in the files “first line” and “second line”.\nWriting should happen into two different file descriptors but write into the same file."}),"\n",(0,t.jsx)(i.h3,{id:n[1].id,children:n[1].value}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Write a C/C++ program that gets the filepath with the first argument and opens it."}),"\n",(0,t.jsxs)(i.li,{children:["File ",(0,t.jsx)(i.strong,{children:"should not"})," be opened with the O_APPEND file."]}),"\n",(0,t.jsx)(i.li,{children:"You are not allowed to use seek/lseek to move the cursor to the end."}),"\n",(0,t.jsx)(i.li,{children:"The program writes two lines: “first line” and “second line”. Each line is written in a different descriptor."}),"\n",(0,t.jsx)(i.li,{children:"After write, the file should contain both lines in the same file."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Hint: you may use dup/dup2."}),"\n",(0,t.jsx)(i.h3,{id:n[2].id,children:n[2].value}),"\n",(0,t.jsx)(i.p,{children:"The resulting application should be able to build and execute from command line as follows:"}),"\n",(0,t.jsx)(i.pre,{icon:a.Fx,tabIndex:"0","data-language":"sh","data-word-wrap":"",children:(0,t.jsxs)(i.code,{children:[(0,t.jsx)(i.span,{children:(0,t.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"make"})}),"\n",(0,t.jsxs)(i.span,{children:[(0,t.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"./manual-append"}),(0,t.jsx)(i.span,{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"},children:" result.txt"})]})]})}),"\n",(0,t.jsx)(i.p,{children:"The output file should contain the following text:"}),"\n",(0,t.jsx)(i.pre,{"data-word-wrap":"",children:(0,t.jsx)(i.code,{children:"first line\nsecond line\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The final solution should contain a ",(0,t.jsx)(i.strong,{children:"Makefile"})," for the multi-stage build. The Makefile should also contain targets ",(0,t.jsx)(i.strong,{children:"all"})," and ",(0,t.jsx)(i.strong,{children:"clean"}),". It’s recommended to have compiler and compiler flags to be declared as a Makefile variables. Alternatively, ",(0,t.jsx)(i.strong,{children:"cmake"})," could also be used instead of make."]})]})},"/linux-programming/tasks/file-systems/manual-append",{filePath:"pages/linux-programming/tasks/file-systems/manual-append.mdx",timestamp:1712608548e3,pageMap:l.v,frontMatter:{description:'Your task is to write a program on C/C++ that writes two lines in the files "first line" and "second line".'},title:"FS-5: Manaul append"},"undefined"==typeof RemoteContent?d:RemoteContent.useTOC)}},function(e){e.O(0,[1354,2888,9774,179],function(){return e(e.s=3068)}),_N_E=e.O()}]);