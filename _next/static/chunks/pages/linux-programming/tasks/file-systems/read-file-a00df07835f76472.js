(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4751],{2616:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/linux-programming/tasks/file-systems/read-file",function(){return i(2184)}])},2184:function(e,n,i){"use strict";i.r(n),i.d(n,{useTOC:function(){return d}});var t=i(1527),r=i(5141),s=i(1790),l=i(9947),a=i(7582);function d(e){return[{value:"Description",id:"description",depth:3},{value:"Requirements",id:"requirements",depth:3},{value:"Expected result",id:"expected-result",depth:3}]}n.default=(0,r.c)(function(e){let{toc:n=d(e)}=e,i={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{children:"FS-1: Read from the file"}),"\n",(0,t.jsx)(i.h3,{id:n[0].id,children:n[0].value}),"\n",(0,t.jsxs)(i.p,{children:["You need to implement a program that does the same thing as the ",(0,t.jsx)(i.strong,{children:"cat"})," command in the Linux."]}),"\n",(0,t.jsx)(i.h3,{id:n[1].id,children:n[1].value}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Write a C++ program ",(0,t.jsx)(i.strong,{children:"read-file"})," accepting a file path as an argument."]}),"\n",(0,t.jsx)(i.li,{children:"Implement proper error handling to make sure required file path is passed."}),"\n",(0,t.jsx)(i.li,{children:"Open the given file with proper mode and make sure errors are handled."}),"\n",(0,t.jsx)(i.li,{children:"Read the content of the file into a buffer until reaching the end of the file."}),"\n",(0,t.jsx)(i.li,{children:"Print every portion of the file read in the iteration."}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Hint: if you use printf or std::cin, make sure your strings are terminated with ‘\\0’ symbol."}),"\n",(0,t.jsx)(i.h3,{id:n[2].id,children:n[2].value}),"\n",(0,t.jsx)(i.p,{children:"The resulting application should be able to build and execute from command line as follows:"}),"\n",(0,t.jsx)(i.pre,{icon:a.Fx,tabIndex:"0","data-language":"sh","data-word-wrap":"",children:(0,t.jsxs)(i.code,{children:[(0,t.jsx)(i.span,{children:(0,t.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"make"})}),"\n",(0,t.jsxs)(i.span,{children:[(0,t.jsx)(i.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"./read-file"}),(0,t.jsx)(i.span,{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"},children:" input.txt"})]})]})}),"\n",(0,t.jsx)(i.p,{children:"The program should output the content of the input.txt file on the screen."}),"\n",(0,t.jsxs)(i.p,{children:["The final solution should contain a ",(0,t.jsx)(i.strong,{children:"Makefile"})," for the multi-stage build. The Makefile should also contain targets ",(0,t.jsx)(i.strong,{children:"all"})," and ",(0,t.jsx)(i.strong,{children:"clean"}),". It’s recommended to have compiler and compiler flags to be declared as a Makefile variables. Alternatively, ",(0,t.jsx)(i.strong,{children:"cmake"})," could also be used instead of make."]})]})},"/linux-programming/tasks/file-systems/read-file",{filePath:"pages/linux-programming/tasks/file-systems/read-file.mdx",timestamp:1709725908e3,pageMap:s.v,frontMatter:{},title:"FS-1: Read from the file"},"undefined"==typeof RemoteContent?d:RemoteContent.useTOC)}},function(e){e.O(0,[8702,2888,9774,179],function(){return e(e.s=2616)}),_N_E=e.O()}]);