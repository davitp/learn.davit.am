(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4705],{4024:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/linux-programming/tasks/ipc/shared-array",function(){return n(2864)}])},2864:function(e,s,n){"use strict";n.r(s),n.d(s,{useTOC:function(){return o}});var i=n(2676),r=n(5730),a=n(1570),t=n(2837),l=n(9156);function o(e){return[{value:"Requirements",id:"requirements",depth:3},{value:"Expected result",id:"expected-result",depth:3}]}s.default=(0,r.c)(function(e){let{toc:s=o(e)}=e,n={code:"code",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"IPC-3: Shared array implementation"}),"\n",(0,i.jsx)(n.h3,{id:s[0].id,children:s[0].value}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Write a C++ class implementing a module ",(0,i.jsx)(n.strong,{children:"shared_array"})," which is an array of integers shared between processes."]}),"\n",(0,i.jsx)(n.li,{children:"The class is supposed to be initialized as follows: shared_array array(“array-name”, size);"}),"\n",(0,i.jsx)(n.li,{children:"The size of the array (number of elements) could be between 1 and 1 000 000 000"}),"\n",(0,i.jsx)(n.li,{children:"Two shared arrays are the same in the system if they have equal names and sizes, otherwise, they are different."}),"\n",(0,i.jsx)(n.li,{children:"The class should provide operator [] for indexing an element with a given index i."}),"\n",(0,i.jsx)(n.li,{children:"Any process that knows the name and the size of the array should be able to use it."}),"\n",(0,i.jsx)(n.li,{children:"Write two infinite programs (first and second) to work with the shared array using cross-process semaphore."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:s[1].id,children:s[1].value}),"\n",(0,i.jsx)(n.p,{children:"The resulting application should be able to build from the command line as follows:"}),"\n",(0,i.jsx)(n.pre,{icon:l.Fx,tabIndex:"0","data-language":"sh","data-word-wrap":"",children:(0,i.jsxs)(n.code,{children:[(0,i.jsxs)(n.span,{children:[(0,i.jsx)(n.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"make"}),(0,i.jsx)(n.span,{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"},children:" first"})]}),"\n",(0,i.jsxs)(n.span,{children:[(0,i.jsx)(n.span,{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"},children:"make"}),(0,i.jsx)(n.span,{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"},children:" second"})]})]})}),"\n",(0,i.jsx)(n.p,{children:"The execution of the program should demonstrate how the array changes from the first and second processes."}),"\n",(0,i.jsxs)(n.p,{children:["The final solution should contain a ",(0,i.jsx)(n.strong,{children:"Makefile"})," for the multi-stage build. The Makefile should also contain targets ",(0,i.jsx)(n.strong,{children:"all"})," and ",(0,i.jsx)(n.strong,{children:"clean"}),". It’s recommended to have compiler and compiler flags declared as Makefile variables. Alternatively, ",(0,i.jsx)(n.strong,{children:"cmake"})," could also be used instead of make."]})]})},"/linux-programming/tasks/ipc/shared-array",{filePath:"pages/linux-programming/tasks/ipc/shared-array.mdx",timestamp:1712608548e3,pageMap:a.v,frontMatter:{description:"Unlock interprocess communication in C++ on Linux with 'shared_array' class. Easily share integer arrays between processes, initialize with custom names and sizes, and seamlessly access elements with operator []. Perfect for implementing cross-process synchronization using semaphores.\n"},title:"IPC-3: Shared array implementation"},"undefined"==typeof RemoteContent?o:RemoteContent.useTOC)}},function(e){e.O(0,[1354,2888,9774,179],function(){return e(e.s=4024)}),_N_E=e.O()}]);