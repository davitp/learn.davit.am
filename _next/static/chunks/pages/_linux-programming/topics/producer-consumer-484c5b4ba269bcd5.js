(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6794],{9737:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_linux-programming/topics/producer-consumer",function(){return i(3384)}])},3384:function(e,n,i){"use strict";i.r(n),i.d(n,{useTOC:function(){return d}});var r=i(2676),o=i(8002),t=i(9013),s=i(2600);function d(e){return[{value:"Outline",id:"outline",depth:2},{value:"Definition of Producer-Consumer Problem",id:"definition-of-producer-consumer-problem",depth:3},{value:"Solution Strategies for Multi-Threaded Producer-Consumer Problem",id:"solution-strategies-for-multi-threaded-producer-consumer-problem",depth:3},{value:"Conditional Variables and the Wait/Notify Pattern",id:"conditional-variables-and-the-waitnotify-pattern",depth:3},{value:"References",id:"references",depth:3},{value:"Practice",id:"practice",depth:2},{value:"Writing a Multi-Threaded Producer-Consumer Program",id:"writing-a-multi-threaded-producer-consumer-program",depth:3},{value:"Solving the Producer-Consumer Problem Using Synchronization Primitives",id:"solving-the-producer-consumer-problem-using-synchronization-primitives",depth:3},{value:"References",id:"references-1",depth:3},{value:"Homework",id:"homework",depth:3}]}n.default=(0,o.c)(function(e){let{toc:n=d(e)}=e,i={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h1,{children:"The Producer-Consumer Problem Definition and Solutions"}),"\n",(0,r.jsx)(i.h2,{id:n[0].id,children:n[0].value}),"\n",(0,r.jsx)(i.h3,{id:n[1].id,children:n[1].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Explaining the producer-consumer problem and its importance in synchronization."}),"\n",(0,r.jsx)(i.li,{children:"Discussing various variations of the problem, such as bounded and unbounded buffers."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:n[2].id,children:n[2].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Introducing strategies to solve the producer-consumer problem in a multi-threaded context."}),"\n",(0,r.jsx)(i.li,{children:"Discussing the use of synchronization primitives like mutexes, semaphores, and conditional variables."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:n[3].id,children:n[3].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Understanding the role of conditional variables in synchronization."}),"\n",(0,r.jsx)(i.li,{children:"Exploring the wait/notify pattern and its application in solving synchronization issues."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:n[4].id,children:n[4].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=2JQcrwvADYk",children:"ECE 252 Lecture 15: The Producer-Consumer Problem"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.lektorium.tv/course/22852",children:"Параллельное программирование"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Thread_pool",children:"Thread Pool"})}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:n[5].id,children:n[5].value}),"\n",(0,r.jsx)(i.h3,{id:n[6].id,children:n[6].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Developing a typical multi-threaded producer-consumer program to demonstrate synchronization problems."}),"\n",(0,r.jsx)(i.li,{children:"Identifying and analyzing the synchronization issues that arise."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:n[7].id,children:n[7].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Implementing solutions to the producer-consumer problem using semaphores."}),"\n",(0,r.jsx)(i.li,{children:"Alternative implementation using conditional variables to manage synchronization."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:n[8].id,children:n[8].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.geeksforgeeks.org/producer-consumer-problem-in-c/",children:"Producer Consumer Problem in C"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://medium.com/nerd-for-tech/hands-on-multithreading-with-c-04-producer-consumer-problem-26abdddc485d",children:"Hands-On Multithreading with C++ 04 — Producer-Consumer Problem"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.tutorialspoint.com/producer-consumer-problem-and-its-implementation-with-cplusplus",children:"Producer-Consumer Problem and its Implementation with C++"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=_n2hE2gyPxU",children:"Thread Pools in C (using the PTHREAD API)"})}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:n[9].id,children:n[9].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"/system-programming/tasks/threads/thread-pool/",children:"TH-2: The thread pool implementation"})}),"\n"]})]})},"/_linux-programming/topics/producer-consumer",{filePath:"pages/_linux-programming/topics/producer-consumer.mdx",timestamp:1757370077e3,pageMap:t.v,frontMatter:{description:"Understand and solve the producer-consumer problem in multi-threaded environments. Learn key concepts, solution strategies with mutexes, semaphores, and conditional variables. Practice writing and optimizing producer-consumer programs."},title:"The Producer-Consumer Problem Definition and Solutions"},"undefined"==typeof RemoteContent?d:RemoteContent.useTOC)}},function(e){e.O(0,[6827,2888,9774,179],function(){return e(e.s=9737)}),_N_E=e.O()}]);