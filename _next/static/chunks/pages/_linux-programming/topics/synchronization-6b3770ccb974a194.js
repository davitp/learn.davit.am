(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2049],{5323:function(n,e,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_linux-programming/topics/synchronization",function(){return i(2704)}])},2704:function(n,e,i){"use strict";i.r(e),i.d(e,{useTOC:function(){return o}});var r=i(2676),t=i(8002),a=i(9013),s=i(2600);function o(n){return[{value:"Outline",id:"outline",depth:2},{value:"Understanding Synchronization Problems",id:"understanding-synchronization-problems",depth:3},{value:"Definition of Race Condition, Atomicity, and Critical Section",id:"definition-of-race-condition-atomicity-and-critical-section",depth:3},{value:"Overview of Synchronization Primitives",id:"overview-of-synchronization-primitives",depth:3},{value:"Differences Between Synchronization Primitives and Their Drawbacks",id:"differences-between-synchronization-primitives-and-their-drawbacks",depth:3},{value:"References",id:"references",depth:3},{value:"Advanced",id:"advanced",depth:3},{value:"Practice",id:"practice",depth:2},{value:"Demonstrating a Race Condition",id:"demonstrating-a-race-condition",depth:3},{value:"Solving Race Conditions Using Synchronization Primitives",id:"solving-race-conditions-using-synchronization-primitives",depth:3},{value:"Comparing Performance Overhead of Synchronization Primitives",id:"comparing-performance-overhead-of-synchronization-primitives",depth:3},{value:"References",id:"references-1",depth:3}]}e.default=(0,t.c)(function(n){let{toc:e=o(n)}=n,i={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",ul:"ul",...(0,s.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h1,{children:"Introduction to Synchronization Problems"}),"\n",(0,r.jsx)(i.h2,{id:e[0].id,children:e[0].value}),"\n",(0,r.jsx)(i.h3,{id:e[1].id,children:e[1].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Introduction to synchronization problems and the reasons they occur in multi-threaded and multi-process environments."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[2].id,children:e[2].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Explaining the concept of race conditions and how they arise."}),"\n",(0,r.jsx)(i.li,{children:"Understanding atomicity and its importance in preventing race conditions."}),"\n",(0,r.jsx)(i.li,{children:"Defining the critical section and its role in synchronization."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[3].id,children:e[3].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Introducing key synchronization primitives such as mutexes, semaphores, spin locks, and compare-and-swap (CAS) operations."}),"\n",(0,r.jsx)(i.li,{children:"Discussing the usage scenarios for each primitive."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[4].id,children:e[4].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Comparing synchronization primitives and their performance implications."}),"\n",(0,r.jsx)(i.li,{children:"Highlighting the potential drawbacks and limitations of each primitive."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[5].id,children:e[5].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=oehU_Jie3lI",children:"ECE 252 Lecture 12: Concurrency: Synchronization & Atomicity"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=TF9q76lEwKI",children:"ECE 252 Lecture 13: Semaphores"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=ru4Q55Jlf-Y",children:"ECE 252 Lecture 14: Synchronization Patterns"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.lektorium.tv/lecture/13560",children:"Параллельное программирование. Лекция 2 Лекция"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.geeksforgeeks.org/mutex-vs-semaphore/",children:"Mutex vs Semaphore"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=AN6XHy2znzc",children:"Spinlocks - Part 1 - A Basic Spinlock "})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Compare-and-swap",children:"Compare-and-swap"})}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[6].id,children:e[6].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=mB_CNguuiew",children:"ECE 252 Lecture 16: The Readers-Writers Problem"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=y1iDjVuGPSk",children:"ECE 252 Lecture 17: Deadlock"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=QU8PK97SeQE",children:"ECE 252 Lecture 18: Deadlock Avoidance"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.youtube.com/watch?v=vZPLbMFXOHU",children:"ECE 252 Lecture 19: Deadlock Detection and Recovery"})}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:e[7].id,children:e[7].value}),"\n",(0,r.jsx)(i.h3,{id:e[8].id,children:e[8].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Writing a multi-threaded program to illustrate a race condition."}),"\n",(0,r.jsx)(i.li,{children:"Analyzing the output to understand the nature of race conditions."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[9].id,children:e[9].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Implementing solutions to race conditions using synchronization primitives such as mutexes and spin locks."}),"\n",(0,r.jsx)(i.li,{children:"Writing code examples to show the correct usage of these primitives."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[10].id,children:e[10].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Programmatically comparing the performance overhead of different synchronization primitives in various scenarios."}),"\n",(0,r.jsx)(i.li,{children:"Conducting experiments to measure and analyze the impact of synchronization on program efficiency."}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:e[11].id,children:e[11].value}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://www.geeksforgeeks.org/mutex-lock-for-linux-thread-synchronization/",children:"Mutex lock for Linux Thread Synchronization"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://packt.medium.com/how-to-use-semaphores-in-posix-concurrency-control-144c34549807",children:"How to use Semaphores in POSIX Concurrency Control"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_mutex_init.3p.html",children:"Linux manual page - pthread_mutex_init(3p)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_mutex_destroy.3p.html",children:"Linux manual page - pthread_mutex_destroy(3p)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_mutex_lock.3p.html",children:"Linux manual page - pthread_mutex_lock(3p)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_mutex_unlock.3p.html",children:"Linux manual page - pthread_mutex_unlock(3p)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_spin_lock.3.html",children:"Linux manual page - spin_lock(3)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_spin_unlock.3.html",children:"Linux manual page - spin_unlock(3)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/sem_init.3.html",children:"Linux manual page - sem_init(3)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/sem_destroy.3.html",children:"Linux manual page - sem_destroy(3p)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/sem_wait.3.html",children:"Linux manual page - sem_wait(3)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/sem_post.3.html",children:"Linux manual page - sem_post(3)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_cond_wait.3p.html",children:"Linux manual page - pthread_cond_wait(3)"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.a,{href:"https://man7.org/linux/man-pages/man3/pthread_cond_signal.3p.html",children:"Linux manual page - pthread_cond_signal(3)"})}),"\n"]})]})},"/_linux-programming/topics/synchronization",{filePath:"pages/_linux-programming/topics/synchronization.mdx",timestamp:1757370077e3,pageMap:a.v,frontMatter:{description:"Learn to tackle synchronization problems in multi-threaded environments. Understand race conditions, atomicity, and critical sections. Explore mutexes, semaphores, and spin locks. Practice solving race conditions and optimizing performance."},title:"Introduction to Synchronization Problems"},"undefined"==typeof RemoteContent?o:RemoteContent.useTOC)}},function(n){n.O(0,[6827,2888,9774,179],function(){return n(n.s=5323)}),_N_E=n.O()}]);